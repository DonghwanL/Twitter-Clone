{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  name: 'hwan',\n  age: 33,\n  password: 'secret'\n};\nconst changeNickname = {};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'CHANGE_NICKNAME':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        name: action.data\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/hwan/Desktop/Dev/React/react-nodebird/prepare/front/reducers/index.js"],"names":["initialState","name","age","password","changeNickname","rootReducer","state","action","type","data"],"mappings":";;;;;;AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,MADa;AAEnBC,EAAAA,GAAG,EAAE,EAFc;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,MAAMC,cAAc,GAAG,EAAvB;;AAGA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,6CACKF,KADL;AAEEL,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAFf;AAFJ;AAOD,CARD;;AAUA,eAAeJ,WAAf","sourcesContent":["const initialState = {\n  name: 'hwan',\n  age: 33,\n  password: 'secret',\n}\n\nconst changeNickname = {\n  \n}\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'CHANGE_NICKNAME':\n      return {\n        ...state,\n        name: action.data,\n      }\n  }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}