{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      if (typeof action === 'function') {\n        return action(dispatch, getState, extraArgument);\n      }\n\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var middlewares = [thunkMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/hwan/Desktop/Dev/React/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","createStore","compose","composeWithDevTools","reducer","thunkMiddleware","loggerMiddleware","dispatch","getState","next","action","extraArgument","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,eAAP,MAA4B,aAA5B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA4B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACzE,UAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChC,eAAOA,MAAM,CAACH,QAAD,EAAWC,QAAX,EAAqBG,aAArB,CAAb;AACD;;AAED,aAAOF,IAAI,CAACC,MAAD,CAAX;AACD,KANoD;AAAA,GAA5B;AAAA,CAAzB;;AAQA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,WAAW,GAAG,CAACR,eAAD,EAAkBC,gBAAlB,CAApB;AACA,MAAMQ,QAAQ,GAAG,QACbZ,OAAO,CAACF,eAAe,MAAf,SAAmBa,WAAnB,CAAD,CADM,GAEbV,mBAAmB,CAACH,eAAe,MAAf,SAAmBa,WAAnB,CAAD,CAFvB;AAGA,MAAME,KAAK,GAAGd,WAAW,CAACG,OAAD,EAAUU,QAAV,CAAzB;AACA,SAAOC,KAAP;AACD,CAPD;;AASA,IAAMC,OAAO,GAAGjB,aAAa,CAACa,cAAD,EAAiB;AAC5CK,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n  if (typeof action === 'function') {\n    return action(dispatch, getState, extraArgument);\n  }\n\n  return next(action);\n};\n\nconst configureStore = () => {\n  const middlewares = [thunkMiddleware, loggerMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : composeWithDevTools(applyMiddleware(...middlewares))\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, { \n  debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}